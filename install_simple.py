"""
Script de Instalaci√≥n Autom√°tica para RadiografIA Pro Simple
Instala dependencias y configura el entorno
Compatible con TensorFlow 2.10
"""
import subprocess
import sys
import os
from pathlib import Path
import time

def print_header():
    """Mostrar cabecera de instalaci√≥n"""
    print("=" * 60)
    print("üöÄ INSTALADOR RadiografIA Pro Simple")
    print("=" * 60)
    print("Sistema Inteligente de Diagn√≥stico por Radiograf√≠as")
    print("Versi√≥n: 1.0 - TensorFlow 2.10")
    print("Compatibilidad: Windows 10 - CPU Optimizado")
    print("TensorFlow: 2.10.1 (Optimizado para CPU)")
    print("-" * 60)

def check_python_version():
    """Verificar versi√≥n de Python"""
    print("üîç Verificando versi√≥n de Python...")
    if sys.version_info < (3, 8):
        print("‚ùå Error: Se requiere Python 3.8 o superior")
        print(f"   Versi√≥n actual: {sys.version}")
        print("   Descargar desde: https://www.python.org/downloads/")
        return False
    print(f"‚úì Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro} - OK")
    return True

def check_pip():
    """Verificar que pip est√© disponible"""
    print("üîç Verificando pip...")
    try:
        import pip
        print("‚úì pip disponible - OK")
        return True
    except ImportError:
        print("‚ùå Error: pip no est√° instalado")
        print("   Instalar pip desde: https://pip.pypa.io/en/stable/installation/")
    return False

def install_tensorflow_210():
    """Instalar espec√≠ficamente TensorFlow 2.10.1"""
    print("üß† Instalando TensorFlow 2.10.1...")
    try:
        # Verificar si TensorFlow ya est√° instalado
        try:
            import tensorflow as tf
            current_version = tf.__version__
            if current_version.startswith('2.10'):
                print(f"‚úì TensorFlow {current_version} ya est√° instalado")
                return True
            else:
                print(f"‚ö†Ô∏è TensorFlow {current_version} encontrado, actualizando a 2.10.1...")
        except ImportError:
            print("   TensorFlow no est√° instalado, instalando...") 
            # Instalar TensorFlow 2.10.1
            subprocess.check_call([
            sys.executable, "-m", "pip", "install", "tensorflow==2.10.1"
            ])
            print("‚úì TensorFlow 2.10.1 instalado correctamente")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error al instalar TensorFlow 2.10.1: {e}")
    return False

def install_requirements():
    """Instalar dependencias desde requirements_simple.txt"""
    print("üì¶ Instalando dependencias compatibles con TensorFlow 2.10...")
    requirements_file = Path("requirements_simple.txt")
    if not requirements_file.exists():
        print("‚ùå Error: Archivo requirements_simple.txt no encontrado")
        return False
    try:
        # Actualizar pip primero
        print("   Actualizando pip...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade", "pip"], stdout=subprocess.DEVNULL)
        # Instalar TensorFlow 2.10 espec√≠ficamente primero
        if not install_tensorflow_210():
            return False
        print("   Instalando otros paquetes...")
        subprocess.check_call([
            sys.executable, "-m", "pip", "install", "-r", str(requirements_file)
        ])
        print("‚úì Dependencias instaladas correctamente")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error al instalar dependencias: {e}")
    return False
